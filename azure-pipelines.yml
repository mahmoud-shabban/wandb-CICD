
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: my-org-agent-pool
  
jobs:
- job: seconde_job
  steps:
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        # Write your commands here
        touch /home/moi/pipeline-created-file
        echo 'Hello world' > /home/moi/pipeline-created-file
- job: read_secrets_from_vault
  steps:
  - task: VaultReadKV@4
    inputs:
      strUrl: 'http://192.168.1.3:8200'
      ignoreCertificateChecks: true
      useProxy: 'none'
      strNamespaces: '/'
      strAuthType: 'clientToken'
      strToken: 'hvs.CAESIMWxZlTJsIv2Rsa-RdiSMXYJLT9zqd1iPIRpJi899r7gGiIKHGh2cy50RUpvSVNEZGVKVld0TEtzY3VWTWNXemcQmc8B'
      strKVEnginePath: 'kv'
      kvVersion: 'v2'
      strSecretPath: 'kv/app1/'
      strPrefixType: 'custom'
      strVariablePrefix: 'AZ'
      replaceCR: true
      strCRPrefix: '_'
    env:
      VAULT_UN: $(VAULT_UN)
      VAULT_PASS: $(VAULT_PASS)
      VAULT_ADDRESS: $(VAULT_ADDRESS) 
- job: write_vault_secrets
  steps:
  - script: |
      touch /home/moi/vault-secrets
  - task: PythonScript@0
    inputs:
      scriptSource: 'inline'
      script: |
        from environs import Env
        env = Env()
        env.read_env()
        with open("/home/moi/vault-secrets", "a") as f:
            with env.prefixed("AZ_"):
                f.write("env 1 is: " + env('ENV1') + ' ')
                f.write(env('ENV2 is: ' + env('ENV2') + ' '))
      pythonInterpreter: '/usr/bin/python3'